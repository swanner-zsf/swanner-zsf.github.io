{"pages":[],"posts":[{"title":"前端调用 face++ API实现微信小程序身份证识别","text":"小程序拍照并本地保存拍摄身份证得到照片，将照片路径保存至data中： 12345&lt;!-- camera.wxml --&gt;&lt;camera device-position=&quot;back&quot; flash=&quot;off&quot; binderror=&quot;error&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;&lt;/camera&gt;&lt;button type=&quot;primary&quot; bindtap=&quot;takePhoto&quot;&gt;拍照&lt;/button&gt;&lt;view&gt;预览&lt;/view&gt;&lt;image mode=&quot;widthFix&quot; src=&quot;{{src}}&quot;&gt;&lt;/image&gt; 1234567891011121314151617// camera.jsPage({ takePhoto() { const ctx = wx.createCameraContext() ctx.takePhoto({ quality: &apos;high&apos;, success: (res) =&gt; { this.setData({ src: res.tempImagePath }) } }) }, error(e) { console.log(e.detail) }}) 照片转base64编码格式通过微信小程序文件管理器wx.getFileSystemManager获得照片路径，通过encoding将它转为base64编码格式。 12345678let that = this;wx.getFileSystemManager().readFile({ filePath: this.data.src, encoding: &apos;base64&apos;, success: res =&gt; { let _img_base64 = &apos;data:image/png;base64,&apos; + res.data; }}); 调用face++ API通过wx.request向face++请求回数据请求参数(必选）: api_key: “xxx” api_secret: “xxx” image_url / image_file / image_base64 数据返回成功后，将数据保存123456789101112131415161718wx.request({ url: &apos;https://api-cn.faceplusplus.com/cardpp/v1/ocridcard&apos;, data: { api_key: &apos;&apos;, api_secret: &apos;&apos;, image_base64: _img_base64 }, method: &quot;POST&quot;, header: { &apos;content-type&apos;: &apos;application/x-www-form-urlencoded&apos; // 默认值 }, success: function(res) { that.setData({ identity : res.data.cards[0] }); console.log(that.data.identity); } })","link":"/2019/09/14/face++/"},{"title":"Markdown 基本语法","text":"换行在行后空两格回车，自动换行。 表格表格内文本位置默认居左，居右写法 —:居中写法 :—: 1234567大标题1|大标题2|大标题3 ---|---|--- 内容1|内容2|内容3 内容1|内容2|内容3 列表列表形式需与上文空行；符号 - + * 和内容之间需加空格。 无序列表： 123- 列表内容+ 列表内容* 列表内容 有序列表：任意数字加点、加空格、加内容 1231. 列表内容2. 列表内容3. 列表内容 下划线在markdown中使用下划线 “_” ,需要在前加反斜杠 “ \\ “ 表示。 超链接[链接名](链接地址)","link":"/2019/09/14/markdown-notes/"},{"title":"Vue.js入门","text":"知识点 问题 相关链接 watch?computed link1","link":"/2019/09/21/Vue-js入门/"},{"title":"微信小程序form提交.md.","text":"","link":"/2019/09/16/微信小程序form提交/"},{"title":"node.js入门","text":"node.js入门1.node.js搭建http服务1.1 hello word demo123456var http = require(&quot;http&quot;);http.createServer((req, res) =&gt; { console,log(req.url); res.write(&quot;&lt;html&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt;&quot;)}).listen(3000, console.log(&quot;server running...&quot;)) 1.2 GET &amp;&amp; POST123456789101112131415161718var http = require(&quot;http&quot;);var url = require(&quot;url&quot;);http.createServer((req, res) =&gt; { console.log(req.method); if(req.method === &quot;GET&quot;) { var params = url.parse(req.url, true, true) res.end(JSON.stringify(params)); }else if(req.method === &quot;POST&quot;) { var data_str = &quot;&quot;; req.on(&quot;data&quot;, (chunk) =&gt; { data_str += chunk }); res.end(data_str); }}).listen(3000, () =&gt; { console.log(&quot;srever running...&quot;)}) node.js中url.parse() 方法使用说明:将一个url字符串转换成对象并返回语法:url.parse(urlStr, [parseQueryString], [slashesDenoteHost])接收参数:| | 参数 |含义 ||— | — | — || 1 | urlStr | url字符串 || 2 | parseQueryString | 默认为false,为true时将使用查询模块分析查询字符串 || 3 | slashesDenoteHost | 默认为false, //foo/bar 形式的字符串将被解释成 { pathname: ‘//foo/bar’ },如果设置成true，//foo/bar 形式的字符串将被解释成 { host: ‘foo’, pathname: ‘/bar’ } |","link":"/2019/09/23/node-js入门/"},{"title":"JavaScript基础","text":"1. Array1.1 熟悉 toString() push() 数组末尾添加元素，并返回添加元素后的数组长度。 pop() 删除数组的最后一个元素，并返回该删除元素。 reverse() 用于颠倒排列数组元素，返回改变后的数组。 1.2 不熟悉 函数名称 用途 1 Array.isArray() 判断是否为数组,返回布尔值 2 valueOf() 数组的valueOf()方法返回数组本身 3 shift() 用于删除数组的第一个元素，并返回该元素 4 unshift() 在数组的第一个位置添加元素，并返回添加新元素后的数组长度 5 join() 以指定参数作为分隔符，将所有数组元素连接成为一个字符串返回 6 concat() 用于多个数组的合并 7 slice() 用于提取目标数组的一部分，返回一个新数组。第一个参数为起始位置，第二个参数为终止位置，如果省略第二个参数，则一直返回到数组最后一个元素 （重要应用：将类似数组的对象转为真正的数组 8 splice(start, count, addElement1, …) 第一个参数是删除的起始位置，第二个参数是被删除的个数，后面的参数表示要被插入数组的新元素。（如果只是单纯地插入元素，第二个参数可以设为0；如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组） 9 sort() 数值先被转成字符串再按字典排序; 自定义排序：传入一个函数作为参数 10 map() 将数组的所有成员依次传入参数函数 11 forEach() forEach()无法中断执行，总是会将所有成员遍历完。 12 filter() 过滤数组成员，返回新数组，filter方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。filter方法还可以接受第二个参数，用来绑定参数函数内部的this变量。 13 some(), every() 接受一个函数作为参数，该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。 14 reduce(), reduceRight() 依次处理数组的每个成员，它的参数函数接受以下4个参数：1.累积变量，默认为数组的第一个成员 2.当前变量，默认为数组的第二个成员 3.当前位置（从0开始）4.原数组 15 indexOf(), lastIndexOf() 返回给定元素在数组中第一次和最后一次出现的位置， 如果没有出现则返回-1。 1.3 Array要点构造函数写法 new Array() 缺陷：不同的参数会导致行为不一致，因此不建议使用它生成新数组，直接使用数组字面量更好： 1var arr = [1, 2]; 判断对象类型： 1typeof 2. String2.1 String实例属性String.prototype.length 2.2 String实例方法 函数名称 使用方法 1 charAt() 返回指定位置的字符，可以用数组下标代替 2 concat() 连接两个字符串 3 slice() 从原数组取出字符串并返回 4 substring() 与slice()方法相似，不同之处：substring()会将负数的参数自动变成0；当第二个参数小于第一个参数，会自动互换位置。 5 substr() 与slice(),substring()相似，不同之处：如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。 6 indexOf(), lastIndexOf() 可以接受第二个参数，表示从该位置向后（向前）匹配。 7 trim() 去除字符串两端的空格，返回一个新字符串，不改变原字符串 8 toLowerCase()/ toUpperCase() 全部转为小写/全部转为大写 9 match() 用于确定原字符串是否匹配某个子字符串，返回匹配的第一个字符串，没找到返回null;返回的数组还有index属性和input属性，分别表示匹配字符串开始的位置和原始字符串。 10 search(), replace() 基本等同于match(),返回值为匹配的第一个位置，没找到返回-1；replace() 一般情况下只替换第一个匹配。 11 split() 分割字符串，第二个参数限定返回数组的最大成员数。 12 localeCompare() 比较两个字符串：&lt;0,0,&gt;0 3. Math3.1 Math静态属性Math.E:","link":"/2019/09/19/JavaScript基础/"},{"title":"微信小程序前端开发","text":"事件绑定冒泡事件 点击事件：tap 长按事件：longtap 触摸事件：touchstart / touchend / touchmove / touchcancel bind绑定与catch绑定区别 bind不阻止事件向上冒泡 catch阻止事件向上冒泡","link":"/2019/09/15/微信小程序/"}],"tags":[{"name":"小程序 身份证识别 face++","slug":"小程序-身份证识别-face","link":"/tags/小程序-身份证识别-face/"}],"categories":[]}